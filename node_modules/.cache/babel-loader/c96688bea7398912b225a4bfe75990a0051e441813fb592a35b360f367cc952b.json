{"ast":null,"code":"var _jsxFileName = \"/Users/ysy/projects/ticktickup-client/src/containers/auth/RegisterFormContainer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { authRegister, changeField } from '../../modules/auth';\nimport { closeModal, openModal } from '../../modules/modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RegisterFormContainer() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    register,\n    authError,\n    auth\n  } = useSelector(state => state.auth);\n  const {\n    loading,\n    modal\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const onSubmit = async e => {\n    e.preventDefault();\n    console.log('submit');\n    const test = await dispatch(authRegister({\n      username: register.username,\n      password: register.password\n    }));\n    console.log(test);\n  };\n  const onChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    dispatch(changeField({\n      form: 'register',\n      name,\n      value\n    }));\n  };\n  const successRegister = () => {\n    dispatch(closeModal());\n    navigate('/login');\n  };\n  useEffect(() => {\n    if (auth) {\n      dispatch(openModal());\n    }\n  }, [auth]);\n  return /*#__PURE__*/_jsxDEV(AuthForm, {\n    type: 'register',\n    form: register,\n    onChange: onChange,\n    onSubmit: onSubmit,\n    loading: loading.loading,\n    passwordMatch: register.passwordMatch,\n    authError: authError,\n    modalState: modal.state,\n    modal: {\n      title: '알림',\n      content: '회원가입이 성공적으로 되었습니다.',\n      callback: successRegister\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(RegisterFormContainer, \"TRGe+n0e1VI0XfDEmSkMsLLnTiA=\", false, function () {\n  return [useNavigate, useSelector, useSelector, useDispatch];\n});\n_c = RegisterFormContainer;\nvar _c;\n$RefreshReg$(_c, \"RegisterFormContainer\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","useNavigate","AuthForm","authRegister","changeField","closeModal","openModal","RegisterFormContainer","navigate","register","authError","auth","state","loading","modal","dispatch","onSubmit","e","preventDefault","console","log","test","username","password","onChange","name","value","target","form","successRegister","passwordMatch","title","content","callback"],"sources":["/Users/ysy/projects/ticktickup-client/src/containers/auth/RegisterFormContainer.tsx"],"sourcesContent":["import { title } from 'process';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { AppDispatch, RootState } from '../../modules';\nimport { authRegister, changeField } from '../../modules/auth';\nimport { closeModal, openModal } from '../../modules/modal';\n\nexport default function RegisterFormContainer() {\n  const navigate = useNavigate();\n  const { register, authError, auth } = useSelector(\n    (state: RootState) => state.auth\n  );\n  const { loading, modal } = useSelector((state: RootState) => state);\n  const dispatch = useDispatch<AppDispatch>();\n  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    console.log('submit');\n\n    const test = await dispatch(\n      authRegister({ username: register.username, password: register.password })\n    );\n    console.log(test);\n  };\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    dispatch(changeField({ form: 'register', name, value }));\n  };\n\n  const successRegister = () => {\n    dispatch(closeModal());\n    navigate('/login');\n  };\n\n  useEffect(() => {\n    if (auth) {\n      dispatch(openModal());\n    }\n  }, [auth]);\n\n  return (\n    <AuthForm\n      type={'register'}\n      form={register}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      loading={loading.loading}\n      passwordMatch={register.passwordMatch}\n      authError={authError}\n      modalState={modal.state}\n      modal={{\n        title: '알림',\n        content: '회원가입이 성공적으로 되었습니다.',\n        callback: successRegister,\n      }}\n    />\n  );\n}\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,QAAQ,MAAM,gCAAgC;AAErD,SAASC,YAAY,EAAEC,WAAW,QAAQ,oBAAoB;AAC9D,SAASC,UAAU,EAAEC,SAAS,QAAQ,qBAAqB;AAAC;AAE5D,eAAe,SAASC,qBAAqB,GAAG;EAAA;EAC9C,MAAMC,QAAQ,GAAGP,WAAW,EAAE;EAC9B,MAAM;IAAEQ,QAAQ;IAAEC,SAAS;IAAEC;EAAK,CAAC,GAAGX,WAAW,CAC9CY,KAAgB,IAAKA,KAAK,CAACD,IAAI,CACjC;EACD,MAAM;IAAEE,OAAO;IAAEC;EAAM,CAAC,GAAGd,WAAW,CAAEY,KAAgB,IAAKA,KAAK,CAAC;EACnE,MAAMG,QAAQ,GAAGhB,WAAW,EAAe;EAC3C,MAAMiB,QAAQ,GAAG,MAAOC,CAAmC,IAAK;IAC9DA,CAAC,CAACC,cAAc,EAAE;IAClBC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IAErB,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CACzBZ,YAAY,CAAC;MAAEmB,QAAQ,EAAEb,QAAQ,CAACa,QAAQ;MAAEC,QAAQ,EAAEd,QAAQ,CAACc;IAAS,CAAC,CAAC,CAC3E;IACDJ,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;EACnB,CAAC;EAED,MAAMG,QAAQ,GAAIP,CAAsC,IAAK;IAC3D,MAAM;MAAEQ,IAAI;MAAEC;IAAM,CAAC,GAAGT,CAAC,CAACU,MAAM;IAChCZ,QAAQ,CAACX,WAAW,CAAC;MAAEwB,IAAI,EAAE,UAAU;MAAEH,IAAI;MAAEC;IAAM,CAAC,CAAC,CAAC;EAC1D,CAAC;EAED,MAAMG,eAAe,GAAG,MAAM;IAC5Bd,QAAQ,CAACV,UAAU,EAAE,CAAC;IACtBG,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;EAEDV,SAAS,CAAC,MAAM;IACd,IAAIa,IAAI,EAAE;MACRI,QAAQ,CAACT,SAAS,EAAE,CAAC;IACvB;EACF,CAAC,EAAE,CAACK,IAAI,CAAC,CAAC;EAEV,oBACE,QAAC,QAAQ;IACP,IAAI,EAAE,UAAW;IACjB,IAAI,EAAEF,QAAS;IACf,QAAQ,EAAEe,QAAS;IACnB,QAAQ,EAAER,QAAS;IACnB,OAAO,EAAEH,OAAO,CAACA,OAAQ;IACzB,aAAa,EAAEJ,QAAQ,CAACqB,aAAc;IACtC,SAAS,EAAEpB,SAAU;IACrB,UAAU,EAAEI,KAAK,CAACF,KAAM;IACxB,KAAK,EAAE;MACLmB,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE,oBAAoB;MAC7BC,QAAQ,EAAEJ;IACZ;EAAE;IAAA;IAAA;IAAA;EAAA,QACF;AAEN;AAAC,GAlDuBtB,qBAAqB;EAAA,QAC1BN,WAAW,EACUD,WAAW,EAGtBA,WAAW,EACrBD,WAAW;AAAA;AAAA,KANNQ,qBAAqB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}